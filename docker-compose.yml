services:
  traefik:
    image: "traefik"
    restart: always
    command:
      - "--api=true"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--certificatesresolvers.mytlschallenge.acme.tlschallenge=true"
      - "--certificatesresolvers.mytlschallenge.acme.email=${SSL_EMAIL}"
      - "--certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - traefik_data:/letsencrypt
      - /var/run/docker.sock:/var/run/docker.sock:ro
    networks:
      - webnet

  n8n:
    image: docker.n8n.io/n8nio/n8n
    restart: always
    ports:
      - "127.0.0.1:5678:5678"
    labels:
      - traefik.enable=true
      - traefik.http.routers.n8n.rule=Host(`${SUBDOMAIN}.${DOMAIN_NAME}`)
      - traefik.http.routers.n8n.tls=true
      - traefik.http.routers.n8n.entrypoints=web,websecure
      - traefik.http.routers.n8n.tls.certresolver=mytlschallenge
      - traefik.http.middlewares.n8n.headers.SSLRedirect=true
      - traefik.http.middlewares.n8n.headers.STSSeconds=315360000
      - traefik.http.middlewares.n8n.headers.browserXSSFilter=true
      - traefik.http.middlewares.n8n.headers.contentTypeNosniff=true
      - traefik.http.middlewares.n8n.headers.forceSTSHeader=true
      - traefik.http.middlewares.n8n.headers.SSLHost=${DOMAIN_NAME}
      - traefik.http.middlewares.n8n.headers.STSIncludeSubdomains=true
      - traefik.http.middlewares.n8n.headers.STSPreload=true
      - traefik.http.routers.n8n.middlewares=n8n@docker
    environment:
      - N8N_HOST=${SUBDOMAIN}.${DOMAIN_NAME}
      - N8N_PORT=5678
      - N8N_PROTOCOL=https
      - NODE_ENV=production
      - WEBHOOK_URL=https://${SUBDOMAIN}.${DOMAIN_NAME}/
      - GENERIC_TIMEZONE=${GENERIC_TIMEZONE}
    volumes:
      - n8n_data:/home/node/.n8n
      - ./local-files:/files
    networks:
      - webnet
    
  evolution-api:
      container_name: evolution_api
      image: atendai/evolution-api:v2.1.1
      restart: always
      ports:
          - "8080:8080"
      env_file:
          - .env
      volumes:
          - evolution_instances:/evolution/instances
      networks:
        - webnet
  
  ftp:
    image: fauria/vsftpd
    container_name: ftp_server
    environment:
      FTP_USER: ${FTP_USER} # Usuário do FTP
      FTP_PASS: ${FTP_PASSWORD} # Senha do FTP
      PASV_ADDRESS: "127.0.0.1" # Endereço para conexões passivas
      PASV_MIN_PORT: 21100
      PASV_MAX_PORT: 21110
    ports:
      - "21:21"              # Porta padrão do FTP
      - "21100-21110:21100-21110" # Faixa de portas para modo passivo
    volumes:
      - /home/ubuntu/github-actions-ftp/ftp:/home/vsftpd:rw # Monta a pasta local 'site/' no diretório padrão do FTP
    networks:
      - webnet
    restart: always
  
  db:
      image: postgres
      restart: always
      # set shared memory limit when using docker-compose
      shm_size: 128mb
      # or set shared memory limit when deploy via swarm stack
      volumes:
        - type: tmpfs
          target: /dev/shm
          tmpfs:
            size: 134217728 # 128*2^20 bytes = 128Mb
      environment:
      POSTGRES_PASSWORD: example

  adminer:
      image: adminer
      restart: always
      ports:
      - 8080:8080

networks:
  webnet:

volumes:
  n8n_data:
  traefik_data:
  evolution_instances: